<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on the crab &amp; musket</title><link>/blog/</link><description>Recent content in Blogs on the crab &amp; musket</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 Sep 2019 10:50:24 +0000</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>It turns everything it touches into a machine</title><link>/blog/it-turns-everything-it-touches-into-a-machine/</link><pubDate>Tue, 17 Sep 2019 10:50:24 +0000</pubDate><guid>/blog/it-turns-everything-it-touches-into-a-machine/</guid><description>Alarms cry out, overloaded gauges spin, the enormous engine reaches critical temperature and explodes. Its operators are doused in scalding steam, and they stagger away, desperately trying to free themselves from clothes melting to their bodies.
&amp;ldquo;Moloch!&amp;rdquo; cries Freder, the film&amp;rsquo;s young protagonist, as he witnesses the devastating industrial accident. Fainting, he imagines the engine transformed into a huge demonic face. Platoons of workers march into its maw and are dashed on pounding wheels and pistons within.</description></item><item><title>Book notes from 2018</title><link>/blog/book-notes-from-2018/</link><pubDate>Mon, 31 Dec 2018 05:00:00 +0000</pubDate><guid>/blog/book-notes-from-2018/</guid><description>These are the books I read in 2018 and some brief thoughts they inspired. I don&amp;rsquo;t consider these reviews, nor summaries&amp;mdash;they&amp;rsquo;re unstructured, my main goal being to preserve the memory of how I felt about them as I read them. Call them personal reflections.
They&amp;rsquo;re listed in the order in which I finished each book. I&amp;rsquo;d recommend almost any of these to someone looking for a good book, but my top five favourites are marked with â˜…</description></item><item><title>Loyalty: a primer for my friends and family</title><link>/blog/loyalty-a-primer/</link><pubDate>Tue, 24 Oct 2017 05:00:00 +0000</pubDate><guid>/blog/loyalty-a-primer/</guid><description>Loyalty is not a cool idea. Its image has been tarnished by consumer loyalty programs and the party loyalty of partisan politics. But a hundred years ago, American philosopher Josiah Royce had a unique, hopeful vision of loyalty which defied its poor (even back then) reputation. I was enthralled by his ideas, because they seemed utterly relevant to life today&amp;mdash;both to the big debates of the intelligentsia, and also to the choices myself and my friends are making for ourselves.</description></item><item><title>Development versus deployment: Docker and Haskell</title><link>/blog/development-versus-deployment-docker-and-haskell/</link><pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate><guid>/blog/development-versus-deployment-docker-and-haskell/</guid><description>This post was prompted by a recent discussion about using Docker for Haskell development. The question was: how do I develop quickly using Docker, and avoid waiting for the container to be rebuilt all the time? My answer is that you should develop in one container, and deploy an entirely different container.
Now, this does sound odd, given that Docker was supposed to be the great equaliser between development and production environments.</description></item><item><title>A matter of opinion: what I dislike about TorqueScript</title><link>/blog/torquescript/</link><pubDate>Thu, 25 Dec 2014 00:00:00 +0000</pubDate><guid>/blog/torquescript/</guid><description>It appears that despite spending a long time ranting about my dislike for TorqueScript, I haven&amp;rsquo;t made it clear exactly what frustrates me. This post is an effort to rectify those misunderstandings.
Disclaimer What I want to do here isn&amp;rsquo;t to criticise the people who designed TorqueScript, or say that they should have made different decisions when TorqueScript was designed. What may have been perfectly valid design choices in 1998 (such as writing your own custom scripting language!</description></item><item><title>Monster Mash: entry #2</title><link>/blog/monster-mash-entry-2/</link><pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate><guid>/blog/monster-mash-entry-2/</guid><description>Welcome one, welcome all to my third and final Monster Mash jam log. (Here&amp;rsquo;s the first one and the second.) Since I got busy during the week, this will basically summarise everything I did between Wednesday and the end of the jam last night. I&amp;rsquo;ll also write a bit of a post-mortem about the project and how I felt it went.
I have to report, unfortunately, that I didn&amp;rsquo;t actually make it into the jam, because a midnight I was fiddling with getting the game&amp;rsquo;s itch.</description></item><item><title>Monster Mash: entry #1</title><link>/blog/monster-mash-entry-1/</link><pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate><guid>/blog/monster-mash-entry-1/</guid><description>Welcome one, welcome all to my second Monster Mash jam log. (Here&amp;rsquo;s the first one.) I&amp;rsquo;ve got two days to summarise, since I didn&amp;rsquo;t do an awful lot of work yesterday. But, I:
Made a third-person camera controller with relative movement to the camera, all in script! This is an ugly hack and one I don&amp;rsquo;t want to repeat. The main challenge was the maths involved in converting the local direction we want to travel (e.</description></item><item><title>Monster Mash: entry #0</title><link>/blog/monster-mash-entry-0/</link><pubDate>Sun, 29 Jun 2014 00:00:00 +0000</pubDate><guid>/blog/monster-mash-entry-0/</guid><description>The first day of my Monster Mash attempt has ended with some fortunate progress. Though I&amp;rsquo;m technically cheating (the jam starts tomorrow), I absolve myself by pointing out that I&amp;rsquo;ll be having a fairly busy week with several days off anyway - and I won&amp;rsquo;t be actually submitting the game, most likely. Since I had some time today while travelling, I thought I&amp;rsquo;d get some progress in early. I&amp;rsquo;m using Torque 3D and Blender for everything.</description></item><item><title>The Torque 3D shutdown sequence - a safari</title><link>/blog/torque-3d-shutdown-sequence/</link><pubDate>Tue, 24 Jun 2014 00:00:00 +0000</pubDate><guid>/blog/torque-3d-shutdown-sequence/</guid><description>Welcome to the second Torque 3D safari. In this series I document my explorations in the Torque 3D source code. Today, I&amp;rsquo;m exploring the engine&amp;rsquo;s shutdown sequence in order to change the engine&amp;rsquo;s exit status code. Currently, it always returns 0 (success). For the purpose of unit testing, I&amp;rsquo;d like to see if I can make it return a 1 (or any other code) if I want it to (i.e., if tests fail).</description></item><item><title>The Torque 3D unit testing system - a safari</title><link>/blog/torque-3d-unit-testing-system/</link><pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate><guid>/blog/torque-3d-unit-testing-system/</guid><description>This is the first in a series of experimental posts that explore some of Torque 3D&amp;rsquo;s subsystems. It&amp;rsquo;s going to be written in a nearly stream-of-consciousness style as I explore the system myself, and there&amp;rsquo;ll be relatively little editing. This is an experiment to provide more organic engine documentation. I&amp;rsquo;ve picked an easy first subject, the unit testing framework, because I&amp;rsquo;m currently replacing it with Google Test, and figured this would be a good way for me to get to know the extent of the code I&amp;rsquo;ll be touching.</description></item><item><title>IO: You may say I'm a monad, but I'm not the only one!</title><link>/blog/you-may-say-im-a-monad/</link><pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate><guid>/blog/you-may-say-im-a-monad/</guid><description>One of the things I love about Haskell is its tools for abstracting computation. There are so many different ways to look at a given problem, and new ones are being invented/discovered all the time. Monads are just one abstraction, a popular and important one.
When you&amp;rsquo;re learning Haskell, you&amp;rsquo;re told &amp;lsquo;IO is a monad&amp;rsquo;, and whether or not you understand what that means, you start to see the significance of binding impure values, returning pure ones, using do notation, and so on.</description></item><item><title>Micro-tutorial: liftM by accident</title><link>/blog/liftm-by-accident/</link><pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate><guid>/blog/liftm-by-accident/</guid><description>As a relatively new Haskeller, I&amp;rsquo;ve been mystified at the lift family of functions. They idea that they promote a pure function to do some computation in a monad makes sense, but I&amp;rsquo;ve never found uses for them in my code, and I think it&amp;rsquo;s because I don&amp;rsquo;t fully understand them. That changed yesterday, so I hope that my process will help other people in my position come to terms with liftM.</description></item></channel></rss>